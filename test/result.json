 Contract {
    setProvider: [Function (anonymous)],
    currentProvider: [Getter/Setter],
    _requestManager: RequestManager {
      provider: HDWalletProvider {
        walletHdpath: "m/44'/60'/0'/0/",
        wallets: [Object],
        addresses: [Array],
        chainSettings: {},
        engine: [Web3ProviderEngine],
        hdwallet: [EthereumHDKey],
        initialized: [Promise],
        hardfork: 'london',
        chainId: 5
      },
      providers: {
        WebsocketProvider: [Function: WebsocketProvider],
        HttpProvider: [Function: HttpProvider],
        IpcProvider: [Function: IpcProvider]
      },
      subscriptions: Map(0) {}
    },
    givenProvider: null,
    providers: {
      WebsocketProvider: [Function: WebsocketProvider],
      HttpProvider: [Function: HttpProvider],
      IpcProvider: [Function: IpcProvider]
    },
    _provider: HDWalletProvider {
      walletHdpath: "m/44'/60'/0'/0/",
      wallets: {
        '0xa729be885a88e0f6c2609a85cacfafe2bc3d322a': [Wallet],
        '0x2717e60e3bf6e04ff3731f2ef75984e569dc31ee': [Wallet],
        '0x5ad4ae5273014cd5ec0210ea3be4ff52ba57fb76': [Wallet],
        '0xdefbaf1252d6d7b4755cb69131c086a22be030ba': [Wallet],
        '0x328afcc977c8df7ff3b2818cbf25a3c3bf206157': [Wallet],
        '0xd6dde84cb48ecd62fa3124c86408bf6c47bf48a0': [Wallet],
        '0x11aed1ba68999b80ec5599b3008c831cda30a9c4': [Wallet],
        '0xbcc047f4c933b3bdc86935066622c7b1953e5112': [Wallet],
        '0x1e8ff81bd647b047e52f80f30b8d96f0e4bab619': [Wallet],
        '0x91b649f6beda74df64e02de08e6d25f9d8638daa': [Wallet]
      },
      addresses: [
        '0xa729be885a88e0f6c2609a85cacfafe2bc3d322a',
        '0x2717e60e3bf6e04ff3731f2ef75984e569dc31ee',
        '0x5ad4ae5273014cd5ec0210ea3be4ff52ba57fb76',
        '0xdefbaf1252d6d7b4755cb69131c086a22be030ba',
        '0x328afcc977c8df7ff3b2818cbf25a3c3bf206157',
        '0xd6dde84cb48ecd62fa3124c86408bf6c47bf48a0',
        '0x11aed1ba68999b80ec5599b3008c831cda30a9c4',
        '0xbcc047f4c933b3bdc86935066622c7b1953e5112',
        '0x1e8ff81bd647b047e52f80f30b8d96f0e4bab619',
        '0x91b649f6beda74df64e02de08e6d25f9d8638daa'
      ],
      chainSettings: {},
      engine: Web3ProviderEngine {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: 30,
        _blockTracker: [PollingBlockTracker],
        _ready: [Stoplight],
        currentBlock: [Object],
        _providers: [Array],
        _running: true,
        [Symbol(kCapture)]: false
      },
      hdwallet: EthereumHDKey { _hdkey: [HDKey] },
      initialized: Promise { undefined },
      hardfork: 'london',
      chainId: 5
    },
    setRequestManager: [Function (anonymous)],
    BatchRequest: [Function: bound Batch],
    extend: [Function: ex] {
      formatters: {
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormat
  ter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        inputStorageKeysFormatter: [Function: inputStorageKeysFormatter],
        outputProofFormatter: [Function: outputProofFormatter],
        outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptForm
  atter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter]
      },
      utils: {
        _fireError: [Function: _fireError],
        _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
        _flattenTypes: [Function: _flattenTypes],
        randomHex: [Function: randomHex],
        BN: [Function: BNwrapped],
        isBN: [Function: isBN],
        isBigNumber: [Function: isBigNumber],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        sha3: [Function],
        sha3Raw: [Function: sha3Raw],
        keccak256: [Function],
        soliditySha3: [Function: soliditySha3],
        soliditySha3Raw: [Function: soliditySha3Raw],
        encodePacked: [Function: encodePacked],
        isAddress: [Function: isAddress],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toChecksumAddress: [Function: toChecksumAddress],
        toHex: [Function: toHex],
        toBN: [Function: toBN],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        hexToNumberString: [Function: hexToNumberString],
        hexToNumber: [Function: hexToNumber],
        toDecimal: [Function: hexToNumber],
        numberToHex: [Function: numberToHex],
        fromDecimal: [Function: numberToHex],
        hexToUtf8: [Function: hexToUtf8],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        stripHexPrefix: [Function: stripHexPrefix],
        utf8ToHex: [Function: utf8ToHex],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        hexToAscii: [Function: hexToAscii],
        toAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        fromAscii: [Function: asciiToHex],
        unitMap: [Object],
        toWei: [Function: toWei],
        fromWei: [Function: fromWei],
        padLeft: [Function: leftPad],
        leftPad: [Function: leftPad],
        padRight: [Function: rightPad],
        rightPad: [Function: rightPad],
        toTwosComplement: [Function: toTwosComplement],
        isBloom: [Function: isBloom],
        isUserEthereumAddressInBloom: [Function: isUserEthereumAddressInBloom],
        isContractAddressInBloom: [Function: isContractAddressInBloom],
        isTopic: [Function: isTopic],
        isTopicInBloom: [Function: isTopicInBloom],
        isInBloom: [Function: isInBloom],
        compareBlockNumbers: [Function: compareBlockNumbers],
        toNumber: [Function: toNumber]
      },
      Method: [Function: Method]
    },
    clearSubscriptions: [Function (anonymous)],
    options: {
      address: [Getter/Setter],
      jsonInterface: [Getter/Setter],
      data: undefined,
      from: undefined,
      gasPrice: undefined,
      gas: undefined
    },
    handleRevert: [Getter/Setter],
    defaultCommon: [Getter/Setter],
    defaultHardfork: [Getter/Setter],
    defaultChain: [Getter/Setter],
    transactionPollingTimeout: [Getter/Setter],
    transactionPollingInterval: [Getter/Setter],
    transactionConfirmationBlocks: [Getter/Setter],
    transactionBlockTimeout: [Getter/Setter],
    blockHeaderTimeout: [Getter/Setter],
    defaultAccount: [Getter/Setter],
    defaultBlock: [Getter/Setter],
    methods: {
      getMessage: [Function: bound _createTxObject],
      '0xce6d41de': [Function: bound _createTxObject],
      'getMessage()': [Function: bound _createTxObject],
      message: [Function: bound _createTxObject],
      '0xe21f37ce': [Function: bound _createTxObject],
      'message()': [Function: bound _createTxObject],
      setMessage: [Function: bound _createTxObject],
      '0x368b8772': [Function: bound _createTxObject],
      'setMessage(string)': [Function: bound _createTxObject]
    },
    events: { allEvents: [Function: bound ] },
    _address: '0x8304D7cbD0cC5b3b79f39d047f72Fb949678dEce',
    _jsonInterface: [
      {
        inputs: [],
        name: 'getMessage',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
        constant: undefined,
        payable: undefined,
        signature: '0xce6d41de'
      },
      {
        inputs: [],
        name: 'message',
        outputs: [Array],
        stateMutability: 'view',
        type: 'function',
        constant: true,
        payable: undefined,
        signature: '0xe21f37ce'
      },
      {
        inputs: [Array],
        name: 'setMessage',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
        constant: undefined,
        payable: undefined,
        signature: '0x368b8772'
      }
    ]
  }
  